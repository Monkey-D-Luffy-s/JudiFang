@model instademo.Models.InitialVideoModal
@{
    ViewData["Title"] = "Instagram Reels Style Video";
    var RandVideo = Model.startVideo;
    if (Model.startVideo == null)
    {
        var rand = new Random();
        var i = rand.Next(0, Model.videos.Count);
        RandVideo = Model.videos[i];
    }

    var Comments = Model.comments.ToList().Where(obj => obj.VideoId == RandVideo.Id);
}

@section Styles {
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<!-- Bootstrap Icons CDN -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<style>
    .Inst-Container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: calc(100vh - 70px); /* Adjust for header height */
    padding: 10px 0;
    }

    .reel-container {
    width: 90%;
    max-width: 400px;
    min-height: auto; /* Cap height at viewport minus header */
    aspect-ratio: 9 / 16;
    background-color: #000;
    position: relative;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
    touch-action: pan-y;
    }

    video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    }

    .reel-overlay {
    position: absolute;
    bottom: 20px;
    left: 20px;
    color: #fff;
    font-family: Arial, sans-serif;
    font-size: 16px;
    text-shadow: 0 0 5px rgba(0, 0, 0, 0.7);
    pointer-events: none;
    }

    .actions {
    position: absolute;
    bottom: 5%;
    right: 10%;
    color: aliceblue;
    font-size: 30px;
    margin:0;
    padding:0px;
    }
    .Commentdetails{
    color: white;
    font-size: 14px;
    text-align:center;
    margin:0;
    padding: -2px 0 0 0;
    }

    /* Add extra content to enable scrolling */
    .scrollable-content {
    min-height: 100vh; /* Ensure content exceeds viewport for scrolling */
    }

    .modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent */
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease;
    }

    .modal-backdrop.show {
    opacity: 1;
    visibility: visible;
    }

    .mod {
    position: fixed;
    background-color: black;
    color: white;
    bottom: 0;
    transform: translateY(100%); /* Start below screen */
    width: 100%;
    max-width: 400px; /* Match reel-container width */
    height: 70vh;
    border-top-left-radius: 15px;
    border-top-right-radius: 15px;
    z-index: 1001;
    transition: transform 0.3s ease-in-out; /* Smooth slide */
    overflow-y: auto; /* Scrollable content inside modal */
    }

    .mod.show {
    transform: translateY(0); /* Slide up to bottom of screen */
    }

    .modal-content {
    padding: 20px;
    font-family: Arial, sans-serif;
    }

    .modal-close {
    position: absolute;
    top: 10px;
    right: 10px;
    background: black;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #fff;
    }

    .commentGestures{

    display:flex;
    justify-content:space-between;
    align-items:center;
    text-align:center;
    padding: 4px 12px;
    gap:5px;
    }

    .commentInput{
    outline: none;
    border: none;
    width:280px;
    padding: 8px 12px;
    border-radius:20px;
    background-color:gray;
    color:white;

    }

    .sendComment{
    display:flex;
    align-items:center;
    justify-content:center;
    outline:none;
    border:none;
    padding:4px 6px;
    margin-top:14px;
    background-color:inherit;
    }

    .commentClose{
    background-color: gray;
    color: white;
    outline: none;
    border:none;
    border-radius:50%;
    padding:4px 6px;
    width:40px;
    height:40px;
    font-size:20px;
    }

    .sendIcon{
    background: gray; /* blue */
    color: white; /* icon color */
    border-radius: 50%; /* makes it circular */
    padding: 10px; /* controls the size of the circle */
    display: inline-flex; /* helps center the icon inside */
    justify-content: center;
    align-items: center;
    width: 40px; /* fixed width and height for round shape */
    height: 40px;
    font-size: 20px;
    }

    .input-row {
    display: flex;
    padding-top:10px;
    /* space between inputs */
    align-items: center; /* vertical alignment */
    }

    .commentSection{
    display: flex;
    padding: 10px;
    justify-content: space-between;
    align-items: center;
    text-align:center;
    margin-bottom: 0 !important;
    }

    .name-msg{
    display:flex;
    flex-direction:column;
    text-align:start;
    justify-content:center;
    padding:0px 10px;
    margin-bottom: 0 !important;
    }

    .commenterNmae{
    font-size:12px;
    font-weight:bold;
    color:orangered;
    margin-bottom: 0 !important;
    }

    .comnetorComment{
    font-size: 16px;
    padding-left: 14px;
    margin-bottom: 0 !important;
    }

    .commentDate{
    text-align:center;
    font-size:12px;
    align-items:center;
    margin-bottom: 0 !important;
    }

</style>
}

<div class="scrollable-content">
    <div class="Inst-Container">
        <div class="reel-container">
            <video autoplay loop playsinline>
                <source id="videoSource" src="/Uploads/@RandVideo.VideoPath" type="video/mp4">
                Your browser does not support the video tag.
            </video>
            <div class="reel-overlay">
                <p>Sample Instagram Reel</p>
            </div>
            <div class="actions">
                <div class="flex-column gap-3">
                    <a href="@Url.Action("Like", "videos", new { id = RandVideo.Id })">
                        <div class="flex-column gap-0 align-items-center align-text-top">
                            <i class="bi bi-hand-thumbs-up"></i>
                            <p class="Commentdetails">@RandVideo.Likes</p>
                        </div>
                    </a>
                    <a href="@Url.Action("Like", "videos", new { id = RandVideo.Id })">
                        <p><i class="bi bi-heart"></i></p>
                    </a>
                    <p><i class="bi bi-chat" id="chat"></i></p>

                    <p><i class="bi bi-share"></i></p>
                </div>

            </div>
            <div class="flex-column justify-content-center align-items-center align-text-top">
                <div class="mod">
                    <div class="commentGestures">
                        <form id="commentForm" asp-controller="videos" asp-action="SendComment" method="post">
                            <div class="input-row">
                                <input placeholder="comment" class="commentInput" name="msg" id="commentInput" />
                                <input type="hidden" name="Id" id="commentId" value="@RandVideo.Id" />
                                <button class="sendComment" type="submit" onclick="prepareData()"><p><i class="bi bi-send sendIcon" id="sendIcon"></i></p></button>
                               
                            </div>
                        </form>
                        <button class="commentClose" id="modal-close"><i class="bi bi-x-lg"></i></button>

                    </div>
                    @foreach(var comment in Comments)
                    {
                        <div class="commentSection">
                            <div class="name-msg">
                                <p class="commenterNmae">@comment.Name</p>
                                <p class="comnetorComment">@comment.Comment</p>
                            </div>
                            <div class="commentDate">
                                <p style="margin-bottom:0;">@comment.Date</p>
                            </div>
                        </div>
                    }

                </div>
                </di>
               
        
        </div>
    </div>
    <!-- Optional: Add dummy content to demonstrate scrolling -->
    
</div>

@section Scripts {
    <script>
        const videoList = @Html.Raw(Json.Serialize(Model.videos));

        const Comments = @Html.Raw(Json.Serialize(Model.comments));
        const videoTag = document.querySelector('video');
        const source = document.getElementById('videoSource');
        const chat = document.getElementById('chat');
        const modal = document.querySelector('.mod');
        const modalClose = document.getElementById('modal-close')
        const commentInput = document.getElementById('commentInput');
        const sendFill = document.querySelector('#sendIcon');

        function loadRandomVideo() {
            const randomIndex = Math.floor(Math.random() * videoList.length);
            const video = videoList[randomIndex];
            source.src = '/Uploads/' + video.videoPath;
            videoTag.load();
            videoTag.play();

            // Update action links dynamically
            const likeLink1 = document.querySelector('.actions a[href*="Like"]');
            const likeLink2 = document.querySelector('.actions a[href*="Like"] + p + a');
            const likesDisplay = document.querySelector('.actions p.fs-2');
            likeLink1.href = `/videos/Like/${video.id}`;
            likeLink2.href = `/videos/Like/${video.id}`;
            likesDisplay.textContent = video.likes;
            Comments = modal.
        }

        let touchStartY = 0;
        let touchEndY = 0;

        document.addEventListener('touchstart', (e) => {
            touchStartY = e.changedTouches[0].screenY;
        });

        document.addEventListener('touchend', (e) => {
            touchEndY = e.changedTouches[0].screenY;
            handleSwipe();
        });

        function handleSwipe() {
            const swipeDistance = touchStartY - touchEndY;
            const minSwipeDistance = 50;

            if (swipeDistance > minSwipeDistance || swipeDistance < -minSwipeDistance) {
                loadRandomVideo();
            }
        }

        document.addEventListener('wheel', (e) => {
            if (e.deltaY > 50 || e.deltaY < -50) {
                loadRandomVideo();
            }
        });

        videoTag.addEventListener('click', () => {
            if (videoTag.paused) {
                videoTag.play();
            } else {
                videoTag.pause();
            }
        });

        chat.addEventListener('click', () => {

            modal.classList.add('show');
            
        })

        modalClose.addEventListener('click', () => {

            modal.classList.remove('show');
        });

         commentInput.addEventListener('keydown', (e) =>{
            if(e.target.value != ""){
                sendFill.classList.add('bi-send-fill');
                sendFill.classList.remove('bi-send');
            }else{
                    sendFill.classList.add('bi-send');
                    sendFill.classList.remove('bi-send-fill ');
            }
        } );


    </script>
}